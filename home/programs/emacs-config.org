#+TITLE: My Emacs Configuration
#+AUTHOR: Mostafa Khaled
#+EMAIL: mostafa.khaled.5422@gmail.com
#+STARTUP: overview

:DOC-CONFIG:
#+PROPERTY: header-args:emacs-lisp :tangle config.el
#+PROPERTY: header-args :mkdirp yes :comments no
:END:

* General
** Enable [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Lexical-Binding.html][Lexical Binding]]
#+begin_src emacs-lisp
;; -*- lexical-binding: t -*-
#+end_src

** Native Compilation Cache
#+begin_src emacs-lisp
  (use-package emacs
    :init
    (when (and (fboundp 'startup-redirect-eln-cache)
               (fboundp 'native-comp-available-p)
               (native-comp-available-p))
      (startup-redirect-eln-cache
       (convert-standard-filename
        (expand-file-name  "var/eln-cache/" user-emacs-directory)))))
#+end_src

** Performance
*** GC
#+begin_src emacs-lisp
  (use-package gcmh
    :init
    (gcmh-mode 1)
    :diminish
    (gcmh-mode))

  (use-package emacs
    :custom
    (gc-cons-percentage 0.6))
#+end_src
*** read-process-output
#+begin_src emacs-lisp
  (use-package emacs
    :custom
    (read-process-output-max (* 1024 1024)))
#+end_src

* UI
** Improve some EMACS defaults
#+begin_src emacs-lisp
  (use-package emacs
    :custom
    (inhibit-startup-screen t)
    :config
    (tooltip-mode -1)
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (set-fringe-mode 10))
#+end_src

** Font

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font (font-spec :family "Fira Code Nerd Font" :height 160))
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Nerd Font" :height 160)
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height 180 :weight 'regular)
#+end_src

** Theme

#+begin_src emacs-lisp
  (use-package catppuccin-theme
    :config
    (load-theme 'catppuccin :no-confirm))
#+end_src

** Mode Line
#+begin_src emacs-lisp
  (use-package mood-line
    :config
    (mood-line-mode)
    :custom
    (mood-line-glyph-alist mood-line-glyphs-fira-code))
#+end_src
** Display Line Numbers
#+begin_src emacs-lisp
  (use-package emacs
    :hook
    (prog-mode . display-line-numbers-mode))
#+end_src
** Highlight Current Line
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (global-hl-line-mode))
#+end_src
** Git Gutter
#+begin_src emacs-lisp
  (use-package diff-hl
    :config
    (global-diff-hl-mode)
    (diff-hl-flydiff-mode))
#+end_src
** Ligatures
#+begin_src emacs-lisp
  (use-package ligature
    "Enables support for mapping characters to ligatures."
    :config
    (ligature-set-ligatures
     'prog-mode
     '(;; This set of ligatures is for Fira Code, but
       ;; should work for most any font with ligatures:
       ;; && &&&
       ;; ;; ;;;
       ;; %% %%%
       ;; ?? ??? ?:  ?=  ?.
       ;; !! !!! !. !: !!. != !== !~
       (";" (rx (+ ";")))
       ("&" (rx (+ "&")))
       ("%" (rx (+ "%")))
       ("?" (rx (or ":" "=" "\." (+ "?"))))
       ("!" (rx (+ (or "=" "!" "\." ":" "~"))))
       ;; \\ \\\ \/
       ;; ++ +++ ++++ +>
       ;; :: ::: :::: :> :< := :// ::=
       ;; // /// //// /\ /* /> /===:===!=//===>>==>==/
       ;; == === ==== => =| =>>=>=|=>==>> ==< =/=//=// =~ =:= =!=
       ("\\" (rx (or "/" (+ "\\"))))
       ("+" (rx (or ">" (+ "+"))))
       (":" (rx (or ">" "<" "=" "//" ":=" (+ ":"))))
       ("/" (rx (+ (or ">"  "<" "|" "/" "\\" "\*" ":" "!" "="))))
       ("=" (rx (+ (or ">" "<" "|" "/" "~" ":" "!" "="))))
       ;; |> ||> |||> ||||> |] |} || ||| |-> ||-||
       ;; |->>-||-<<-| |- |== ||=|| |==>>==<<==<=>==//==/=!==:===>
       ("|" (rx (+ (or ">" "<" "|" "/" ":" "!" "}" "\]" "-" "=" ))))
       ;; *> */ *)  ** *** ****
       ;; .. ... .... .= .- .? ..= ..<
       ;; -- --- ---- -~ -> ->> -| -|->-->>->--<<-|
       ;; #: #= #! #( #? #[ #{ #_ #_( ## ### #####
       ;; >: >- >>- >--|-> >>-|-> >= >== >>== >=|=:=>> >> >>> >>>>
       ("*" (rx (or ">" "/" ")" (+ "*"))))
       ("\." (rx (or "=" "-" "\?" "\.=" "\.<" (+ "\."))))
       ("-" (rx (+ (or ">" "<" "|" "~" "-"))))
       ("#" (rx (or ":" "=" "!" "(" "\?" "\[" "{" "_(" "_" (+ "#"))))
       (">" (rx (+ (or ">" "<" "|" "/" ":" "=" "-"))))

       ;; <> <!-- <|> <: <~ <~> <~~ <+ <* <$ </  <+> <*>
       ;; <$> </> <|  <||  <||| <|||| <- <-| <-<<-|-> <->>
       ;; <<-> <= <=> <<==<<==>=|=>==/==//=!==:=> << <<< <<<<
       ("<" (rx (+ (or "\+" "\*" "\$" "<" ">" ":" "~"  "!" "-"  "/" "|" "="))))
       ;; __ ___ ____ _|_ __|____|_
       ;; ~~ ~~~ ~=  ~-  ~@ ~> ~~>
       ("_" (rx (+ (or "_" "|"))))
       ("~" (rx (or ">" "=" "-" "@" "~>" (+ "~"))))
       ;; {| [\ ]# (* }# $> ^=
       "{|"  "[|"  "]#"  "(*"  "}#"  "$>"  "^="
       ;; www wwww
       ;; 0xFF 0x12
       ;; Fl Tl fi fj fl ft
       ("w" (rx (+ "w")))
       ("0" (rx (and "x" (+ (in "A-F" "a-f" "0-9")))))
       "Fl"  "Tl"  "fi"  "fj"  "fl"  "ft"))
    :hook
    (prog-mode-hook . ligature-mode))
#+end_src
* UX
** [[https://github.com/minad/vertico][vertico]]
#+begin_src emacs-lisp
  (use-package vertico
    :custom
    (vertico-scroll-margin 3)
    (vertico-cycle t)
    :init
    (vertico-mode))
#+end_src
** [[https://github.com/minad/consult][consult]]
#+begin_src emacs-lisp
  (use-package consult
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-fd)
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Tweak the register preview for `consult-register-load',
    ;; `consult-register-store' and the built-in commands.  This improves the
    ;; register formatting, adds thin separator lines, register sorting and hides
    ;; the window mode line.
    (advice-add #'register-preview :override #'consult-register-window)
    (setq register-preview-delay 0.5)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     :preview-key '(:debounce 0.4 any))
    (setq consult-narrow-key "<")
    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)
  )
#+end_src
** [[https://github.com/oantolin/orderless][orderless]], [[https://github.com/minad/marginalia][marginalia]] and some built-in options
#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
  (use-package marginalia
    :bind (:map minibuffer-local-map
  	      ("M-A" . margialia-cycle))
    :init
    (marginalia-mode))

  (use-package emacs
    :init
    (savehist-mode))
  
  (use-package emacs
    :custom
    (recentf-max-saved-items 50)
    :init
    (recentf-mode))

  (use-package emacs
    :custom
    (enable-recursive-minibuffers t)
    (read-extended-command-predicate #'command-completion-default-include-p)
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)
    (setq minibuffer-prompt-properties
  	'(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode))
#+end_src
** persp-mode
#+begin_src emacs-lisp
  (use-package perspective
    :custom
    (persp-mode-prefix-key (kbd "C-x M-p"))
    :bind
    ("C-x k" . persp-kill-buffer*)
    :init
    (persp-mode))
#+end_src
** no-littering
#+begin_src emacs-lisp
  (use-package no-littering
    :config
    (add-to-list 'recentf-exclude
                 (recentf-expand-file-name no-littering-var-directory))
    (add-to-list 'recentf-exclude
                 (recentf-expand-file-name no-littering-etc-directory))
    (no-littering-theme-backups)
    :custom
    (no-littering-etc-directory
     (expand-file-name "config/" user-emacs-directory))
    (no-littering-var-directory
     (expand-file-name "data/" user-emacs-directory)))
#+end_src
** Auto Revert
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (global-auto-revert-mode))
#+end_src
** Pixel Scroll
#+begin_src emacs-lisp
  (use-package emacs
    :custom
    (pixel-scroll-precision-interpolate-page t "Enable pixel-level scrolling for page-wise scroll events")
      (pixel-scroll-precision-large-scroll-height 40.0 "Animate any scroll moving the view more than 40 pixels")
    :hook
    (emacs-startup . pixel-scroll-precision-mode)
    :bind
    ("M-v" . pixel-scroll-interpolate-up)
    ("C-v" . pixel-scroll-interpolate-down))

#+end_src
** Save Last Place
#+begin_src emacs-lisp
  (use-package emacs
    :config
    (save-place-mode))
#+end_src
** Visual Undo Tree
#+begin_src emacs-lisp
  (use-package vundo
    "Visualizes undo history as a tree in an interactive buffer."
    :custom
    (vundo-glyph-alist vundo-unicode-symbols "Visualize undo history with pretty unicode symbols")
    :hook
    (vundo-mode . (lambda () (setq-local global-hl-line-mode nil)))
    :bind
    ("C-x u" . vundo))
#+end_src
* Editing

** Spell checking

#+begin_src emacs-lisp
  (use-package jinx
    :hook (emacs-startup . global-jinx-mode)
    :bind (("M-$" . jinx-correct)
  	 ("C-M-$" . jinx-languages)))
#+end_src
** Templates

#+begin_src emacs-lisp
  (use-package yasnippet
    :config
    (yas-global-mode 1))
#+end_src

** Completion
#+begin_src emacs-lisp
  (use-package corfu
    :custom
    (corfu-auto t)
    (corfu-cycle t)
    (corfu-preview-current t)
    (corfu-echo-documentation 0.25)
    (corfu-preview-current 'insert)
    (corfu-preselect-first nil)
    :init
    (global-corfu-mode))

  (use-package kind-icon
    "Adds contextual icons in front of Corfu completion candidates."
    :after
    (corfu)
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter)
    :custom
    (kind-icon-extra-space t "Insert extra blank space after the icon"))



  (use-package emacs
    :custom
    ;; TAB cycle if there are only few candidates
    ;; (completion-cycle-threshold 3)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (tab-always-indent 'complete)

    ;; Emacs 30 and newer: Disable Ispell completion function.
    ;; Try `cape-dict' as an alternative.
    (text-mode-ispell-word-completion nil)

    ;; Hide commands in M-x which do not apply to the current mode.  Corfu
    ;; commands are hidden, since they are not used via M-x. This setting is
    ;; useful beyond Corfu.
    (read-extended-command-predicate #'command-completion-default-include-p))
#+end_src

** Multiple Cursors
#+begin_src emacs-lisp
    (use-package multiple-cursors
      :custom
      (mc/insert-numbers-default 1)
      :bind
      ("C-S-c C-S-c" . mc/edit-lines)
      ("M-n" . mc/mark-next-like-this)
      ("M-p" . mc/mark-previous-like-this)
      ("C-;" . mc/mark-all-like-this))
#+end_src

** Some Useful Keybindings
#+begin_src emacs-lisp
  (use-package emacs
    :bind
    ("C-c DEL" . fixup-whitespace))
#+end_src

* Programming
** Development Environments
*** Use [[https://direnv.net/][direnv]]
#+begin_src emacs-lisp
  (use-package direnv
    :config
    (direnv-mode))
#+end_src

** Languages
*** Nix Language
#+begin_src emacs-lisp
  (use-package nix-ts-mode
    :mode "\\.nix\\'")
#+end_src

*** Rust Language
#+begin_src emacs-lisp
  (use-package rust-mode
    :custom
    (rust-format-on-save t)
    (rust-mode-treesitter-derive t)
    :hook
    (prettify-symbols-mode eglot-ensure))

  (use-package rustic)
#+end_src

*** Latex
**** LSP
#+begin_src emacs-lisp
  (use-package eglot
    :hook
    (tex-mode . eglot-ensure))
#+end_src
**** Math Preview
#+begin_src emacs-lisp
  ;; (use-package xenops
  ;;  :hook
  ;;  (latex-mode Latex-mode))
#+end_src
**** TODO SyncTex
#+begin_src emacs-lisp
  (use-package pdf-tools
    :init
    (pdf-tools-install))
#+end_src
* Org
** Beautify Org files

#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-directory "~/org-files")

    :config
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-document-title nil :font "Cantarell" :weight 'bold :height 2.5)
    (set-face-attribute 'org-level-1 nil :font "Cantarell" :weight 'bold :height 2.5)
    (set-face-attribute 'org-level-2 nil :font "Cantarell" :weight 'bold :height 2.3)
    (set-face-attribute 'org-level-3 nil :font "Cantarell" :weight 'bold :height 2.0)
    (set-face-attribute 'org-level-4 nil :font "Cantarell" :weight 'bold :height 1.5)
    (set-face-attribute 'org-level-5 nil :font "Cantarell" :weight 'bold :height 1.2)
    (set-face-attribute 'org-level-6 nil :font "Cantarell" :weight 'bold :height 1.1)
    (set-face-attribute 'org-level-7 nil :font "Cantarell" :weight 'bold :height 1.0)
    (set-face-attribute 'org-tag nil :font "Cantarell" :weight 'regular :height 0.8)

    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
    (setq org-hide-emphasis-markers t)
    :hook (visual-line-mode variable-pitch-mode org-indent-mode))

  (use-package org-bullets
    :hook
    (org-mode . org-bullets-mode))
#+end_src

** Refiling

#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-refile-targets '((nil :maxlevel . 3)
  			("archive.org" :maxlevel . 1)
  			(org-agenda-files :maxlevel . 3)
  			(org-buffer-list :maxlevel . 2)))
    :config
    (advice-add 'org-refile :after 'org-save-all-org-buffers))
#+end_src

** org-agenda

#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-agenda-files '("habits.org" "tasks.org" "studying.org" "projects.org"))
    (org-agenda-start-with-log-mode t)
    (org-log-done 'note)
    (org-log-repeate 'note)
    (org-log-into-drawer t)
    (org-agenda-custom-commands
      '(("d" "Daily Agenda"
         ((agenda "" ((org-agenda-span 'day)
                      (org-deadline-warning-days 7)))))))
    :bind
    ("C-c o a" . org-agenda))
#+end_src

** org-capture

#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-capture-templates '(("t" "Tasks / Projects")
  			   ("tt" "Task" entry (file+olp "~/org-files/tasks.org" "Inbox")
  			    "* TODO %?\n %U\n %a\n %i" :entry-lines 1)
  			   ("h" "Habit" entry (file "~/org-files/habits.org")
  			    "* %?\n %U\n \n:PROPERTIES:\n:STYLE: habit\n:END:\n %i" :entry-lines 1)
  			   ("m" "Metrics Capture")
  			   ("mw" "Weight" table-line (file+headline "~/org-files/metrics.org" "Weight")
  			    "| %U | %^{Weight} | %^{Notes} |")))
    :bind
    ("C-c o c" . org-capture))
#+end_src

** org-habit
#+begin_src emacs-lisp
  (use-package org
    :custom
    (org-habit-graph-column 60)
    :config
    (add-to-list 'org-modules 'org-habit))
#+end_src

** org-roam
#+begin_src emacs-lisp
  (use-package org-roam
    :custom
    (org-roam-directory (file-truename "~/org-roam"))
    (org-roam-database-connector 'sqlite-builtin)
    (org-roam-completion-everywhere t)
    (org-roam-dailies-directory "journal/")
    :bind (("C-c n l" . org-roam-buffer-toggle)
  	 ("C-c n f" . org-roam-node-find)
  	 ("C-c n i" . org-roam-node-insert))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies)
    (org-roam-setup)
    (org-roam-db-autosync-mode t))
#+end_src

